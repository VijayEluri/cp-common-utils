apply plugin: 'java'
apply plugin: 'idea'

task wrapper(type: Wrapper) {
	gradleVersion = '2.0'
	distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

allprojects {
	group = "com.complexible.common"
	sourceCompatibility = '1.6'
	targetCompatibility = '1.6'

	repositories {
		mavenCentral()
	}


}

ext {
	projectDescription	= "A collection of basic utility classes for various common tasks. " +
						 "Classes provided here often extend or supplement the functionality provided by Guava."
	projectUrl			= "https://github.com/mhgrove/cp-common-utils"
}

subprojects {
	apply plugin: "java"
	apply plugin: "maven"

	dependencies {
		compile 'org.slf4j:slf4j-api:1.7.7'
		compile 'org.slf4j:slf4j-jdk14:1.7.7'

		testCompile 'junit:junit:4.11'
	}

	sourceSets {
		main {
			java {
				srcDir 'main/src'
			}
			resources {
				srcDir 'main/resources'
			}
		}
		test {
			java {
				srcDir 'test/src'
			}
			resources {
				srcDir 'test/resources'
			}
		}
	}

	// create a 'tests' conf for importing test classes from other sub-projects
	task testJar(type: Jar, dependsOn: testClasses) {
		classifier = 'tests'
		from sourceSets.test.output
	}

	artifacts {
		testRuntime testJar // include the tests of other subprojects
	}

	if (project.hasProperty('artifactoryUrl')
		&& project.hasProperty('artifactoryUsername')
		&& project.hasProperty('artifactoryPassword')) {

		task('uploadArtifactory', type: Upload) {
			configuration = configurations.archives
			repositories {
				mavenDeployer {
					repository(url: artifactoryUrl) {
						authentication(userName: artifactoryUsername, password: artifactoryPassword)
					}
					pom.project {
						name = archivesBaseName
						packaging = 'jar'
						description projectDescription
						url  projectUrl
					}

					//mess with the generated pom to remove test dependencies from published artifacts
					pom.withXml { XmlProvider xmlProvider ->
						def xml = xmlProvider.asString()
						def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

						pomXml.dependencies.dependency.each { dep ->
							if (dep.scope.text() != 'compile') {
								def parent = dep.parent()
								parent.remove(dep)
							}
						}

						// add exclusion nodes (only for compile conf) since the maven plugin
						// doesn't handle them as of gradle 1.9
						project.configurations.compile.allDependencies.findAll {
							it instanceof ModuleDependency && !it.excludeRules.isEmpty()
						}.each { ModuleDependency dep ->
							def xmlDep = pomXml.dependencies.dependency.find {
								it.groupId[0].text() == dep.group && it.artifactId[0].text() == dep.name
							}
							def xmlExclusions = xmlDep.exclusions
							if (!xmlExclusions) xmlExclusions = xmlDep.appendNode('exclusions')

							dep.excludeRules.each { ExcludeRule rule ->
								def xmlExclusion = xmlExclusions.appendNode('exclusion')
								xmlExclusion.appendNode('groupId', rule.group)
								xmlExclusion.appendNode('artifactId', rule.module ?: '*')
							}
						}

						def newXml = new StringWriter()
						def printer = new XmlNodePrinter(new PrintWriter(newXml))
						printer.preserveWhitespace = true
						printer.print(pomXml)
						xml.setLength(0)
						xml.append(newXml.toString())
					}

				}
			}
		}
	}
}

evaluationDependsOnChildren()

subprojects {
	task javadocs(type: Javadoc) {
		println "generating docs: ${archivesBaseName}-${project.version}"
		source sourceSets.main.allJava
		classpath = configurations.compile
		destinationDir = file("${rootProject.buildDir}/javadocs/${project.name}")
		configure(options) {
			windowTitle "${project.archivesBaseName}-${project.version} API"
			docTitle "${project.archivesBaseName}-${project.version}"
			bottom "Copyright &#169; 2010-2015 Complexible. All Rights Reserved."
			links "http://docs.oracle.com/javase/6/docs/api/",
				  "http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc/"
		}
	}
}


